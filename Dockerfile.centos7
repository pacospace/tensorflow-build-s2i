
FROM openshift/base-centos7

MAINTAINER Subin Modeel <smodeel@redhat.com>

USER root

ENV BUILDER_VERSION 1.0

LABEL io.k8s.description="S2I builder for Tensorflow binaries." \
      io.k8s.display-name="Tensorflow BUILD" \
      io.openshift.expose-services="8080:http" \
      io.openshift.tags="builder,python,tf-build" \
      io.openshift.s2i.scripts-url="image:///usr/libexec/s2i"

# DONOT uncomment. uncomment for dev.
ARG BAZEL_VERSION=0.20.0
ARG PYTHON_VERSION=3.6
ENV BAZEL_VERSION=$BAZEL_VERSION
ENV PYTHON_VERSION=$PYTHON_VERSION

# Not essential, but wise to set the lang
# Note: Users with other languages should set this in their derivative image
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL=""
ENV PYTHONIOENCODING UTF-8
ENV NB_USER=default
ENV NB_UID=1001
ENV PYTHON_BIN_PATH=/usr/bin/python 
ENV TINI_VERSION=v0.18.0

## Bazel
ENV PYTHON_LIB_PATH=/usr/lib64/python$PYTHON_VERSION/site-packages
ENV LD_LIBRARY_PATH="/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}";
ENV BAZELRC /root/.bazelrc
#### ENV BAZEL_VERSION = DONOT UNCOMMENT
################################################
## Tensorflow ./configure options for Bazel
################################################
ENV PYTHON_BIN_PATH=/usr/bin/python
ENV CC_OPT_FLAGS -march=native
ENV TF_NEED_JEMALLOC 1
ENV TF_NEED_GCP 0
ENV TF_NEED_VERBS 0
ENV TF_NEED_HDFS 0
ENV TF_ENABLE_XLA 0
ENV TF_NEED_OPENCL 0
ENV TF_NEED_CUDA 0
ENV TF_NEED_MPI 0
ENV TF_NEED_GDR 0
ENV TF_NEED_S3 0
ENV TF_NEED_KAFKA 0
ENV TF_NEED_OPENCL_SYCL 0
ENV TF_DOWNLOAD_CLANG 0
ENV TF_SET_ANDROID_WORKSPACE 0
ENV PATH=/home/$NB_USER/.local/bin:/usr/local/bin:$PATH
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0*


RUN echo 'PS1="\u@\h:\w\\$ \[$(tput sgr0)\]"' >> /root/.bashrc \
#	&& grep -vIr "\x00" -- /build_tools/ \
    && yum install -y centos-release-scl-rh \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then yum install -y scl-utils python27 python-devel python27-python-devel && scl enable python27 bash ; fi \
    && if [ "$PYTHON_VERSION" = "3.5" ] ; then yum install -y scl-utils rh-python35 rh-python35-python-pip rh-python35-scldevel && scl enable rh-python35 bash && export PATH=/opt/rh/rh-python35/root/usr/bin:$PATH; fi \
    && if [ "$PYTHON_VERSION" = "3.6" ] ; then yum install -y scl-utils rh-python36 rh-python36-python-pip rh-python36-python-devel && scl enable rh-python36 bash && export PATH=/opt/rh/rh-python36/root/usr/bin:$PATH ; fi \
    && echo "-----IMAGE_TEST--------" \
    && if [ "$PYTHON_VERSION" = "3.5" ] ; then ls -l /opt/rh/rh-python35/root/usr/bin ; fi \
    && if [ "$PYTHON_VERSION" = "3.6" ] ; then ls -l /opt/rh/rh-python36/root/usr/bin ; fi \
    && echo "which_python="`which python` \
    && echo "link_which_python=`ls -l $(which python) | awk '{print  $9 $10 $11}'`" \
    && echo "link_bin_python=`ls -l /usr/bin/python |awk '{print  $9 $10 $11}'`" \
    && echo "which_pip="`which pip` \
    && echo "which_pip_site="`pip --version |awk '{print $4}'` \
    && echo "link_which_pip=`ls -l $(which pip) | awk '{print  $9 $10 $11}'`" \
    && echo "PATH=$PATH" \
    && echo "PYTHON_VERSION=$PYTHON_VERSION" \
    && echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" \
    && echo "PYTHON_LIB_PATH=$PYTHON_LIB_PATH" \ 
    && echo "-----IMAGE_TEST--------" \
    && yum install -y epel-release \
    && yum install -y tar tree git curl wget java-headless bzip2 gnupg2 sqlite3 protobuf-compiler \
    && chgrp -R root /opt \
    && chmod -R a+rwx /opt \
    && chmod a+rw /etc/passwd \
    && curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" \
    && yum install -y vim gcc gcc-c++ glibc-devel openssl-devel perf \
    && yum install -y which findutils x86info cpuid dmidecode procps \
    && yum install -y kernel-devel make automake autoconf swig zip unzip libtool binutils \
    && yum install -y freetype-devel libpng12-devel zlib-devel giflib-devel zeromq3-devel \
    && yum install -y libxml2 libxml2-devel libxslt libxslt-devel gzip \
    && yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel patch gdb file pciutils cmake \
    && echo "-----IMAGE_TEST--------" \
    && echo "which_python="`which python` \
    && echo "link_which_python=`ls -l $(which python) | awk '{print  $9 $10 $11}'`" \
    && echo "link_bin_python=`ls -l /usr/bin/python |awk '{print  $9 $10 $11}'`" \
    && echo "which_pip="`which pip` \
    && echo "which_pip_site="`pip --version |awk '{print $4}'` \
    && echo "link_which_pip=`ls -l $(which pip) | awk '{print  $9 $10 $11}'`" \
    && echo "PATH=$PATH" \
    && echo "PYTHON_VERSION=$PYTHON_VERSION" \
    && echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" \
    && echo "PYTHON_LIB_PATH=$PYTHON_LIB_PATH" \ 
    && echo "-----IMAGE_TEST--------" \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then python$PYTHON_VERSION get-pip.py ; fi \
    && if [ "$PYTHON_VERSION" = "3.5" ] ; then  export LD_LIBRARY_PATH="/opt/rh/rh-python35/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" && export PYTHON_LIB_PATH=/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages && rm -fr /usr/bin/python && ln -s /opt/rh/rh-python35/root/usr/bin/python3.5 /usr/bin/python && python get-pip.py && rm -fr /usr/bin/pip && ln -s /opt/rh/rh-python35/root/usr/bin/pip /usr/bin/pip ; fi \
    && if [ "$PYTHON_VERSION" = "3.6" ] ; then  export LD_LIBRARY_PATH="/opt/rh/rh-python36/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" && export PYTHON_LIB_PATH=/opt/rh/rh-python36/root/usr/lib/python3.6/site-packages && rm -fr /usr/bin/python && ln -s /opt/rh/rh-python36/root/usr/bin/python3.6 /usr/bin/python && python get-pip.py && rm -fr /usr/bin/pip && ln -s /opt/rh/rh-python36/root/usr/bin/pip /usr/bin/pip ; fi \
    && echo "-----IMAGE_TEST--------" \
    && if [ "$PYTHON_VERSION" = "3.5" ] ; then echo "PYTHON_H="`rpm -ql rh-python35-python-devel | grep Python.h` ; fi \
	&& if [ "$PYTHON_VERSION" = "3.5" ] ; then ls -l /opt/rh/rh-python35/root/usr/include/ && ls -l /opt/rh/rh-python35/root/usr/lib64/ ; fi \
    && if [ "$PYTHON_VERSION" = "3.6" ] ; then echo "PYTHON_H="`rpm -ql rh-python36-python-devel | grep Python.h` ; fi \
    && if [ "$PYTHON_VERSION" = "3.6" ] ; then ls -l /opt/rh/rh-python36/root/usr/include/ && ls -l /opt/rh/rh-python36/root/usr/lib64/ ; fi \
    && echo "which_python="`which python` \
    && echo "link_which_python=`ls -l $(which python) | awk '{print  $9 $10 $11}'`" \
    && echo "link_bin_python=`ls -l /usr/bin/python |awk '{print  $9 $10 $11}'`" \
    && echo "which_pip="`which pip` \
    && echo "link_which_pip=`ls -l $(which pip) | awk '{print  $9 $10 $11}'`" \
    && echo "which_pip_ver="`pip --version` \
    && echo "which_pip_site="`pip --version |awk '{print $4}'` \
    && echo "PATH=$PATH" \
    && echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" \
    && echo "PYTHON_LIB_PATH=$PYTHON_LIB_PATH" \
    && echo "PYTHON_VER=$PYTHON_VER" \
    && ls -l /usr/bin/python* \
    && echo "-----IMAGE_TEST--------"

RUN  wget https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini -P /tmp \
    && wget https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc -P /tmp \
    && cd /tmp && gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \
    && gpg --batch --verify /tmp/tini.asc /tmp/tini  \
    && mv /tmp/tini /usr/local/bin/tini  \
    && chmod +x /usr/local/bin/tini  \
    && chown -R 1001:1001 /opt/app-root  \ 
    && chgrp -R root /opt/app-root  \
    && chmod -R ug+rwx /opt/app-root  \
    && echo "startup --batch" >>/etc/.bazelrc  \
    && echo "startup --batch" >>/root/.bazelrc  \
    && echo "build --spawn_strategy=standalone --genrule_strategy=standalone" >>/etc/.bazelrc  \
    && echo "build --spawn_strategy=standalone --genrule_strategy=standalone" >>/root/.bazelrc 


#https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/ci_build/install/.bazelrc
# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
#

# A cloned repo is found under serving folder
#Size of bazel-$BAZEL_VERSION-installer-linux-x86_64.sh is 200MB+
# downloaded file is available under bazel folder



# No yum commands here
# removed python to fix numpy issue
RUN mkdir -p /tf \
	&& if [ "$PYTHON_VERSION" = "3.5" ] ; then export LD_LIBRARY_PATH="/opt/rh/rh-python35/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" ; fi \
	&& if [ "$PYTHON_VERSION" = "3.6" ] ; then export LD_LIBRARY_PATH="/opt/rh/rh-python36/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" ; fi \
	&& echo $LD_LIBRARY_PATH \
    && pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -U setuptools \
    && pip install --no-cache-dir enum34 futures mock numpy six pixiedust pillow pyaml keras \
    && mkdir -p /tf/tools \
    && cd /tf/tools \
    && wget -q https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \
    && ls -l /tf/tools \
    && chmod +x bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \
    && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \
    && bazel \
    && usermod -g root $NB_USER \
    && mkdir -p /workspace \
    && chown $NB_UID:root /workspace \
    && chmod 1777 /workspace \
    && mkdir -p /home/$NB_USER \
    && chown -R $NB_UID:root /home/$NB_USER \
    && chmod g+rwX,o+rX -R /home/$NB_USER

COPY ./s2i/bin/ /usr/libexec/s2i
# ADD test/ /tmp/test/
ADD entrypoint /entrypoint
RUN chmod +x /entrypoint
ADD build_tools /build_tools

# NO CLEANUP
# Donot add below commands
#    && yum erase -y gcc gcc-c++ glibc-devel \
#    && yum clean all -y \


EXPOSE 8080

ENV HOME /home/$NB_USER
# This default user is created in the openshift/base-centos7 image
USER 1001
# Make the default PWD somewhere that the user can write. This is
# useful when connecting with 'oc run' and starting a 'spark-shell',
# which will likely try to create files and directories in PWD and
# error out if it cannot.

WORKDIR /workspace

ENTRYPOINT ["/entrypoint"]

# TODO: Set the default CMD for the image
CMD ["/usr/libexec/s2i/usage"]

